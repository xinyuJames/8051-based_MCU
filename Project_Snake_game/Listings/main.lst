C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2024 06:51:52 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\C51V961\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay.h"
   3          #include "MLED_Lib.h"
   4          #include "MatrixLED.h"
   5          #include "MatrixKey.h"
   6          #include "Snake.h"
   7          #include "Timer0.h"
   8          
   9          //TODO: 1. difficulty selection
  10          //IDEA: 1. use independent button do move, use matrix to restart, so we can use buzzer
  11          unsigned char key;
  12          unsigned char movementMode = 1; //1 - up; 2 - down; 3 - left; 4 - right
  13          unsigned char level = 0;
  14          
  15          void Key_Input();
  16          void levelSelection();
  17          
  18          void main()
  19          {
  20   1        unsigned int i;
  21   1        
  22   1        MLED_Init();
  23   1        Snake_Init();
  24   1        Timer0_Init();
  25   1        while(1)
  26   1        {
  27   2          if (isOver())
  28   2          {
  29   3            //go into game over page
  30   3            for (i = 0; i < 50; i ++)
  31   3            {
  32   4              showSnake();
  33   4            }
  34   3            MLEDShow_GAMEOVER();  
  35   3            MLEDShow_SCORE(getScore());
  36   3            
  37   3            //after displaying game over page, waiting to restart
  38   3            while(isOver())
  39   3            {
  40   4              Key_Input();
  41   4            }
  42   3            
  43   3          } else
  44   2          {
  45   3            //select level first
  46   3            levelSelection();
  47   3            //game playing phase
  48   3            Key_Input();
  49   3            showSnake(); //show snake body and food 
  50   3          }
  51   2          
  52   2        }
  53   1      }
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2024 06:51:52 PAGE 2   

  55          void Timer0_Routine() interrupt 1
  56          {
  57   1        //timer setup
  58   1        static unsigned int count;
  59   1        TL0 = 0x66; 
  60   1        TH0 = 0xFC;
  61   1        count++;
  62   1        
  63   1        //refresh rate 500ms
  64   1        if (level)
  65   1        {
  66   2          if (count >= (5 - level) * 250)
  67   2          {
  68   3            if (!isOver())
  69   3            {
  70   4              if (movementMode == 1) {moveUp();}
  71   4              if (movementMode == 2) {moveDown();}  
  72   4              if (movementMode == 3) {moveLeft();}
  73   4              if (movementMode == 4) {moveRight();}
  74   4            }
  75   3            //change status of snake
  76   3              
  77   3            count = 0;
  78   3          }
  79   2        }
  80   1        
  81   1      }
  82          
  83          
  84          
  85          
  86          //identify key input
  87          void Key_Input()
  88          { 
  89   1        key = getMKey();
  90   1        
  91   1        if (level)
  92   1        {
  93   2          //press 16 in matrix button to restart the game
  94   2          if(key)
  95   2          {
  96   3            if (key == 16)
  97   3            {
  98   4              snakeRestart();
  99   4              movementMode = 1;
 100   4              level = 0;
 101   4            }
 102   3            //take input of movement if restart is not pressed
 103   3          } else if (P3_1 == 0) //move up 
 104   2          {
 105   3            Delay(20);
 106   3            while(P3_1 == 0);
 107   3            Delay(20);
 108   3            movementMode = 1;
 109   3          } else if (P3_0 == 0) //move down
 110   2          {
 111   3            Delay(20);
 112   3            while(P3_0 == 0);
 113   3            Delay(20);
 114   3            movementMode = 2;
 115   3          } else if (P3_2 == 0) //move left
 116   2          {
C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2024 06:51:52 PAGE 3   

 117   3            Delay(20);
 118   3            while(P3_2 == 0);
 119   3            Delay(20);
 120   3            movementMode = 3;
 121   3          } else if (P3_3 == 0) //move right
 122   2          {
 123   3            Delay(20);
 124   3            while(P3_3 == 0);
 125   3            Delay(20);
 126   3            movementMode = 4;
 127   3          }
 128   2        } else
 129   1        {
 130   2          if (P3_1 == 0) //move right
 131   2          {
 132   3            Delay(20);
 133   3            while(P3_1 == 0);
 134   3            Delay(20);
 135   3            level = 1;
 136   3          }
 137   2          if (P3_0 == 0) //move right
 138   2          {
 139   3            Delay(20);
 140   3            while(P3_0 == 0);
 141   3            Delay(20);
 142   3            level = 2;
 143   3          }
 144   2          if (P3_2 == 0) //move right
 145   2          {
 146   3            Delay(20);
 147   3            while(P3_2 == 0);
 148   3            Delay(20);
 149   3            level = 3;
 150   3          }
 151   2          if (P3_3 == 0) //move right
 152   2          {
 153   3            Delay(20);
 154   3            while(P3_3 == 0);
 155   3            Delay(20);
 156   3            level = 4;
 157   3          }
 158   2        }
 159   1        
 160   1      }
 161          
 162          void levelSelection()
 163          {
 164   1        
 165   1        while (!level)
 166   1        {
 167   2          MLEDShow_LXY();
 168   2          Key_Input();
 169   2        }
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    447    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       2
C51 COMPILER V9.60.7.0   MAIN                                                              12/29/2024 06:51:52 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
