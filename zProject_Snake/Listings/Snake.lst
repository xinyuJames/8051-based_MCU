C51 COMPILER V9.60.7.0   SNAKE                                                             01/03/2025 09:54:13 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SNAKE
OBJECT MODULE PLACED IN .\Objects\Snake.obj
COMPILER INVOKED BY: D:\C51V961\C51\BIN\C51.EXE Snake.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Sna
                    -ke.lst) TABS(2) OBJECT(.\Objects\Snake.obj)

line level    source

   1          /*
   2          Xinyu Liu self-taught 8051 MCU
   3          Description: this file is to store "snake object" and corresponding functions.
   4          Version@2025/1/3
   5          */
   6          
   7          #include <REGX52.H>
   8          #include <INTRINS.H>
   9          #include <STDLIB.H>
  10          #include "MatrixLED.h"
  11          
  12          #define WINSCORE 32
  13          
  14          //coordinate of snake start from (1,1), x and y
  15          xdata unsigned char snake[64][2] = {{1, 1}, {1, 2}};
  16          unsigned char food[2];
  17          unsigned char previousHeadNode[2];
  18          unsigned char previousNode[2];
  19          unsigned char snakeLen = 2;
  20          unsigned char gameOver;
  21          unsigned char gameWin = 0;
  22          
  23          void eat(); 
  24          void generateFood();
  25          void isCollide();
  26          
  27          //initialize snake
  28          void Snake_Init()
  29          {
  30   1        generateFood();
  31   1      }
  32          
  33          //restart the snake game, reset parameters
  34          void snakeRestart()
  35          {
  36   1        unsigned int i;
  37   1        for (i = 0; i < 64; i++)
  38   1        {
  39   2          if (i == 0) {snake[i][0] = 1; snake[i][1] = 1;}
  40   2          else if (i == 1) {snake[i][0] = 1; snake[i][1] = 2;}
  41   2          else {snake[i][0] = 0; snake[i][1] = 0;}
  42   2        }
  43   1        snakeLen = 2;
  44   1        gameOver = 0;
  45   1        gameWin = 0;
  46   1      }
  47          
  48          //show snake body to the screen
  49          void showSnake()
  50          {
  51   1        unsigned char i;
  52   1        for (i = 0; i < snakeLen; i++)
  53   1        {
  54   2          MLED_ShowPoint(snake[i][0], snake[i][1]);
C51 COMPILER V9.60.7.0   SNAKE                                                             01/03/2025 09:54:13 PAGE 2   

  55   2        }
  56   1        
  57   1        MLED_ShowPoint(food[0], food[1]);
  58   1      }
  59            
  60          //all the functions below should modify snake array in one unit of time
  61          void bodyFollow()
  62          {
  63   1        unsigned int i;
  64   1        
  65   1        for (i = 0; i < snakeLen - 2; i++)
  66   1        {
  67   2          snake[i][0] = snake[i+1][0];
  68   2          snake[i][1] = snake[i+1][1];
  69   2        }
  70   1        snake[snakeLen - 2][0] = previousHeadNode[0];
  71   1        snake[snakeLen - 2][1] = previousHeadNode[1];
  72   1      } 
  73          
  74          void moveUp()
  75          {
  76   1        //store previous node
  77   1        previousNode[0] = snake[0][0];
  78   1        previousNode[1] = snake[0][1];
  79   1        //store previous head node
  80   1        previousHeadNode[0] = snake[snakeLen - 1][0];
  81   1        previousHeadNode[1] = snake[snakeLen - 1][1];
  82   1        //head of snake move up
  83   1        snake[snakeLen - 1][1] += 1;
  84   1        //the body follow up with head
  85   1        bodyFollow();
  86   1        isCollide();
  87   1        //see if snake can eat
  88   1        eat();
  89   1      }
  90          
  91          void moveDown()
  92          {
  93   1        previousNode[0] = snake[0][0];
  94   1        previousNode[1] = snake[0][1];
  95   1        previousHeadNode[0] = snake[snakeLen - 1][0];
  96   1        previousHeadNode[1] = snake[snakeLen - 1][1];
  97   1        snake[snakeLen - 1][1] -= 1;
  98   1        bodyFollow();
  99   1        isCollide();
 100   1        eat();
 101   1      }
 102          
 103          void moveLeft()
 104          {
 105   1        previousNode[0] = snake[0][0];
 106   1        previousNode[1] = snake[0][1];
 107   1        previousHeadNode[0] = snake[snakeLen - 1][0];
 108   1        previousHeadNode[1] = snake[snakeLen - 1][1];
 109   1        snake[snakeLen - 1][0] -= 1;
 110   1        bodyFollow();
 111   1        isCollide();
 112   1        eat();
 113   1      }
 114          
 115          void moveRight()
 116          {
C51 COMPILER V9.60.7.0   SNAKE                                                             01/03/2025 09:54:13 PAGE 3   

 117   1        previousNode[0] = snake[0][0];
 118   1        previousNode[1] = snake[0][1];
 119   1        previousHeadNode[0] = snake[snakeLen - 1][0];
 120   1        previousHeadNode[1] = snake[snakeLen - 1][1];
 121   1        snake[snakeLen - 1][0] += 1;
 122   1        bodyFollow();
 123   1        isCollide();
 124   1        eat();
 125   1      }
 126          
 127          //determine if has food, and eat if yes, and then generate new food
 128          void eat()
 129          {
 130   1        unsigned int i;
 131   1        
 132   1        if (snake[snakeLen - 1][0] == food[0] && snake[snakeLen - 1][1] == food[1])
 133   1        {
 134   2          //snake array enlength a unit
 135   2          for (i = snakeLen; i > 0; i--)
 136   2          {
 137   3            snake[i][0] = snake[i - 1][0];
 138   3            snake[i][1] = snake[i - 1][1];
 139   3          }
 140   2          //add in the previous node to tail
 141   2          snake[0][0] = previousNode[0];
 142   2          snake[0][1] = previousNode[1];
 143   2          
 144   2          snakeLen++;
 145   2          
 146   2          if (snakeLen == WINSCORE)
 147   2          {
 148   3            gameOver = 1;
 149   3            gameWin = 1;
 150   3          } else
 151   2          {
 152   3            generateFood();
 153   3          }
 154   2          
 155   2        }
 156   1      }
 157          
 158          //determine if snake collide with itself or wall
 159          void isCollide()
 160          {
 161   1        unsigned int i;
 162   1        
 163   1        
 164   1        if (snake[snakeLen - 1][0] > 8 || snake[snakeLen - 1][0] <= 0 || snake[snakeLen - 1][1] > 8 || snake[snak
             -eLen - 1][1] <= 0)
 165   1        {
 166   2          gameOver = 1;
 167   2        }
 168   1        
 169   1        for (i = 0; i < snakeLen - 1; i++)
 170   1        {
 171   2          if (snake[snakeLen - 1][0] == snake[i][0] && snake[snakeLen - 1][1] == snake[i][1])
 172   2          {
 173   3            gameOver = 1;
 174   3            break;
 175   3          }
 176   2        }
 177   1      }
C51 COMPILER V9.60.7.0   SNAKE                                                             01/03/2025 09:54:13 PAGE 4   

 178          
 179          unsigned char isOver()
 180          {
 181   1        return gameOver;
 182   1      }
 183          
 184          unsigned char isWin()
 185          {
 186   1        return gameWin;
 187   1      }
 188          
 189          void generateFood()
 190          {
 191   1        unsigned char newX, newY, isOverlap, i;
 192   1        
 193   1        do
 194   1        {
 195   2          //make sure x and y range from 1-8
 196   2          newX = (rand() % 8) + 1;
 197   2          newY = (rand() % 8) + 1;
 198   2          
 199   2          //make sure new food is not overlapping body
 200   2          isOverlap = 0;
 201   2          for (i = 0; i < snakeLen; i++)
 202   2          {
 203   3            if (snake[i][0] == newX && snake[i][1] == newY)
 204   3            {
 205   4              isOverlap = 1;
 206   4              break;
 207   4            }
 208   3          }
 209   2          
 210   2        } while(isOverlap);
 211   1        
 212   1        //assign value to food
 213   1        food[0] = newX;
 214   1        food[1] = newY;
 215   1      }
 216          
 217          unsigned char getScore()
 218          {
 219   1        return snakeLen;
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    937    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
